import { expect, test } from 'vitest'
import { flipX, flipY, flipPos, flipNeg, rotate90C, rotate90A, rotate180, generateGrid, gridToString } from '../src/transformations';

test('Flip X Test', async() => {
  const grid = generateGrid(8,8,4);
  expect(flipX(grid, [2,3], [5,7])).toEqual([
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
    [0,1,2,1,2,3,0,1],
    [2,3,0,3,0,1,2,3],
    [0,1,2,1,2,3,0,1],
    [2,3,0,3,0,1,2,3],
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
  ]);
});

test('Flip Y Test', async() => {
  const grid = generateGrid(8,8,4);
  expect(flipY(grid, [2,3], [5,7])).toEqual([
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
    [0,1,2,3,2,1,0,3],
    [2,3,0,1,0,3,2,1],
    [0,1,2,3,2,1,0,3],
    [2,3,0,1,0,3,2,1],
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
  ]);
});

test('Flip Pos Test', async() => {
  const grid = generateGrid(8,8,4);
  expect(flipPos(grid, [2,3], [5,6])).toEqual([
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
    [0,1,2,0,2,0,2,3],
    [2,3,0,3,1,3,1,1],
    [0,1,2,2,0,2,0,3],
    [2,3,0,1,3,1,3,1],
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
  ]);
});

test('Flip Neg Test', async() => {
  const grid = generateGrid(8,8,4);
  expect(flipNeg(grid, [2,3], [5,6])).toEqual([
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
    [0,1,2,3,1,3,1,3],
    [2,3,0,0,2,0,2,1],
    [0,1,2,1,3,1,3,3],
    [2,3,0,2,0,2,0,1],
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
  ]);
});

test('Flip Rotate 90C Test', async() => {
  const grid = generateGrid(8,8,4);
  expect(rotate90C(grid, [2,3], [5,6])).toEqual([
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
    [0,1,2,1,3,1,3,3],
    [2,3,0,2,0,2,0,1],
    [0,1,2,3,1,3,1,3],
    [2,3,0,0,2,0,2,1],
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
  ]);
});

test('Flip Rotate 90A Test', async() => {
  const grid = generateGrid(8,8,4);
  expect(rotate90A(grid, [2,3], [5,6])).toEqual([
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
    [0,1,2,2,0,2,0,3],
    [2,3,0,1,3,1,3,1],
    [0,1,2,0,2,0,2,3],
    [2,3,0,3,1,3,1,1],
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
  ]);
});

test('Rotate 180 Test', async() => {
  const grid = generateGrid(8,8,4);
  expect(rotate180(grid, [2,3], [5,7])).toEqual([
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
    [0,1,2,1,0,3,2,1],
    [2,3,0,3,2,1,0,3],
    [0,1,2,1,0,3,2,1],
    [2,3,0,3,2,1,0,3],
    [0,1,2,3,0,1,2,3],
    [2,3,0,1,2,3,0,1],
  ]);
});